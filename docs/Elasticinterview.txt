Elastic Search is built in java and is built on top of apache lucene
HTTP+ REST+JSON. It is distributed by nature and highly scalable

Logstash is data processing pipeline which can ingest data from various data sources.
Kibanan is visualize and analytics platform
Beats types are filebeat for handling log files and metricbeat for collecting CPU or memory usage ,packetbeat for inspecting network traffic and heartbeat for collecting uptime data.

Nodes and Clusters
 
A node is a server that stores data and is part of what is called a cluster.Cluster is collection of nodes and each node contains the part of cluster's data . Collection of nodes contain the entire data set for the cluster.Each node participates in the cluster’s indexing and search capabilities meaning that a node will participate in a given search query by searching the data that it stores.Every node within cluster can handle HTTP requests for clients that want to send a request to the cluster. This is done by using HTTP rest API. A given node within cluster knows about every node in the cluster and is able to forward requests to a given node by using a transport layer whereas http layer is used for communication with external clients, such as an application for instance. All nodes accept http request from client by default
A node may be assigned master node by default .A master node is the node that is responsible for coordinating changes to cluster such as adding or removing nodes creating or removing indices etc.
Just like a cluster, a node is identified by a name which by default is a random Universally Unique IDentifier (UUID).A cluster is identified by a unique name which by default is "elasticsearch".  By default, each node is set up to join a cluster named elasticsearch. 
 
Document: Each data that you store within your cluster is called document .Document are in JSON object. Document are added to index
Index:An index is a collection of documents that have somewhat similar characteristics.
 

Why Sharding? Thats why scalable
For example, a single index of a billion documents taking up 1TB of disk space . YOu have 2 nodes in cluster each with 512GB available for storing data. So entire index will not fit so splitting the index data is necessary or we would be out of disk space

To solve this problem, Elasticsearch provides the ability to subdivide your index into multiple pieces called shards . Shard will contain subset of an index data and is in itself fully functional and you can think of shard as an independent index. When an index is sharded a given document within that index will only be stored within one of the shards. Great thing about shards is that they can be hosted on any node within the cluster. That being said an index shards will not necessarily be distributed across multiple machines as this depends on number of nodes in your cluster.
Now in this case we can divide 1TB in 4 shards i.e 256GB and these shards can be distributed across 2 nodes.Shards allows you to distribute and parallelize operations across shards increases performance. YOu can speficy number of shard while creating index or default 5 will be assigned.
You cannot change number of shards if index is already created.So instead you can create a new index with shards and move the data to new index.

Replication:
Elstic search also uses replica for searching.
In a network/cloud environment where failures can be expected anytime, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason. To this end, Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.
Replication is important for two primary reasons:

It provides high availability in case a shard/node fails. For this reason, it is important to note that a replica shard is never allocated on the same node as the original/primary shard that it was copied from.
It allows you to scale out your search volume/throughput since searches can be executed on all replicas in parallel.
To summarize, each index can be split into multiple shards. An index can also be replicated zero (meaning no replicas) or more times. Once replicated, each index will have primary shards (the original shards that were replicated from) and replica shards (the copies of the primary shards). The number of shards and replicas can be defined per index at the time the index is created. After the index is created, you may change the number of replicas dynamically anytime but you cannot change the number of shards after-the-fact.
Cluster should always have one or more node as replica are never stored on the same node as the primary shard 

Keeping replicas synchronized ?
Routing finds the replication group and primary shard . Check what is routing?
Elastic search uses a model named primary-backup for its data replication.
All operations that affect the index i.e adding , updating or removing documents are sent to primary shard. The primary shard is then responsible for validating the operations . When operation is accepted by primary shard the operation will be performed locally on primary shard itself.When operation completes the operation will be forwarded to each of the replica shards in replica group. If shard has multiple replicats the operations will be performed in parallel on each of the replicas. 

Search query hits the node in cluster. This node becomes coordinating node , it broadcasts the request to all shards in the index that the query refers to .This can be both primary shards and replica shards. These shards then respond with the results and the coordinating node will merge all of the results together and return to client

Routing :
Routing decides which document will go to which shard. 
Shard= hash(routing) % total_primary_Shards. Thats the reason number of shards wont change once index is created as it will change routing formula. So if you change number of shards you might loose the documents